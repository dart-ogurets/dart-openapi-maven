part of {{pubName}}.api;

// This file is generated by https://github.com/dart-ogurets/dart-openapi-maven - you should not modify it
// log generation bugs on Github, as part of the license, you must not remove these headers from the Mustache templates.
// this project is maintained as part of FeatureHub - please consider sponsoring us at https://github.com/featurehub-io

{{#operations}}

  class {{classname}} {
  final {{classname}}Delegate apiDelegate;
  {{classname}}(ApiClient apiClient) : {{^nullSafe}}assert(apiClient != null), {{/nullSafe}}apiDelegate = {{classname}}Delegate(apiClient);


  {{#operation}}
    /// {{summary}}
    ///
    /// {{notes}}
    {{#vendorExtensions.x-dart-produces-json}}
      {{#returnType}}Future<{{{returnType}}}> {{/returnType}}{{^returnType}}Future<void> {{/returnType}}
    {{/vendorExtensions.x-dart-produces-json}}
    {{^vendorExtensions.x-dart-produces-json}}
      {{#vendorExtensions.x-dart-produces-raw}}
      {{#returnType}}Future<{{{returnType}}}> {{/returnType}}{{^returnType}}Future<void> {{/returnType}}
      {{/vendorExtensions.x-dart-produces-raw}}
      {{^vendorExtensions.x-dart-produces-raw}}
      {{#returnType}}Future<String> {{/returnType}}{{^returnType}}Future<void> {{/returnType}}
      {{/vendorExtensions.x-dart-produces-raw}}
    {{/vendorExtensions.x-dart-produces-json}}
    {{nickname}}({{#allParams}}{{#required}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/required}}{{/allParams}}{{#hasOptionalParams}}{Options{{#nullSafe}}?{{/nullSafe}} options{{#hasParams}}, {{/hasParams}}{{#allParams}}{{^required}}{{{dataType}}}{{#nullSafe}}?{{/nullSafe}} {{paramName}}{{^-last}}, {{/-last}}{{/required}}{{/allParams}} }{{/hasOptionalParams}}{{^hasOptionalParams}}{{#hasParams}}, {{/hasParams}}{Options{{#nullSafe}}?{{/nullSafe}} options}{{/hasOptionalParams}}) async {

      final response = await apiDelegate.{{nickname}}({{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}} options: options, {{#hasOptionalParams}}{{#hasParams}}{{/hasParams}}{{#allParams}}{{^required}}{{paramName}}: {{paramName}}{{^-last}}, {{/-last}}{{/required}}{{/allParams}}{{/hasOptionalParams}});

      if (![{{{vendorExtensions.x-valid-status-codes}}}].contains(response.statusCode)) {
      throw ApiException(500, 'Invalid response code ${response.statusCode} returned from API');
      }

    {{^returnType}}
        if (response.statusCode == 204) {
        return;
        }
    {{/returnType}}

      final __body = response.body;
      if(response.statusCode >= 400) {
      throw ApiException(response.statusCode, __body == null ? null : await decodeBodyBytes({{#nullSafe}}__body{{/nullSafe}}{{^nullSafe}}response{{/nullSafe}}));
      }

    {{^returnType}}
        throw ApiException(500, 'Invalid response received for 204 based API');
    {{/returnType}}
    {{#returnType}}

        if (__body == null) {
        throw ApiException(500, 'Received an empty body (not in a 204)');
        }

    {{#vendorExtensions.x-dart-produces-raw}}
      return response;
    {{/vendorExtensions.x-dart-produces-raw}}
    {{^vendorExtensions.x-dart-produces-raw}}
        return await apiDelegate.{{nickname}}_decode({{#nullSafe}}__body{{/nullSafe}}{{^nullSafe}}response{{/nullSafe}});
    {{/vendorExtensions.x-dart-produces-raw}}
    {{/returnType}}
      }

      /// {{summary}}
      ///
      /// {{notes}}
    {{#vendorExtensions.x-dart-extension-name}}
      {{#vendorExtensions.x-dart-produces-json}}
        {{#returnType}}Future<ApiResponse> {{/returnType}}{{^returnType}}Future<ApiResponse> {{/returnType}}
      {{/vendorExtensions.x-dart-produces-json}}
      {{^vendorExtensions.x-dart-produces-json}}
          Future<ApiResponse>
      {{/vendorExtensions.x-dart-produces-json}}
      {{vendorExtensions.x-dart-extension-name}}({{#allParams}}{{#required}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/required}}{{/allParams}}{{#hasOptionalParams}}{Options{{#nullSafe}}?{{/nullSafe}} options{{#hasParams}}, {{/hasParams}}{{#allParams}}{{^required}}{{{dataType}}}{{#nullSafe}}?{{/nullSafe}} {{paramName}}{{^-last}}, {{/-last}}{{/required}}{{/allParams}} }{{/hasOptionalParams}}{{^hasOptionalParams}}{{#hasParams}}, {{/hasParams}}{Options{{#nullSafe}}?{{/nullSafe}} options}{{/hasOptionalParams}}) async {

        final response = await apiDelegate.{{nickname}}({{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}} options: options, {{#hasOptionalParams}}{{#hasParams}}{{/hasParams}}{{#allParams}}{{^required}}{{paramName}}: {{paramName}}{{^-last}}, {{/-last}}{{/required}}{{/allParams}}{{/hasOptionalParams}});

      {{#nullSafe}}
          return ApiResponse(response.statusCode, response.headers, response.body);
      {{/nullSafe}}
      {{^nullSafe}}
          return ApiResponse()
          ..statusCode = response.statusCode
          ..headers = response.headers
          ..body = response.body;
      {{/nullSafe}}

        }
    {{/vendorExtensions.x-dart-extension-name}}
  {{/operation}}
    }


    class {{classname}}Delegate {
    final ApiClient apiClient;

  {{classname}}Delegate(this.apiClient){{^nullSafe}} : assert(apiClient != null){{/nullSafe}};

  {{#operation}}
      Future<ApiResponse>
    {{nickname}}({{#allParams}}{{#required}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/required}}{{/allParams}}{{#hasOptionalParams}}{Options{{#nullSafe}}?{{/nullSafe}} options{{#hasParams}}, {{/hasParams}}{{#allParams}}{{^required}}{{{dataType}}}{{#nullSafe}}?{{/nullSafe}} {{paramName}}{{^-last}}, {{/-last}}{{/required}}{{/allParams}} }{{/hasOptionalParams}}{{^hasOptionalParams}}{{#hasParams}}, {{/hasParams}}{Options{{#nullSafe}}?{{/nullSafe}} options}{{/hasOptionalParams}}) async {
    {{#bodyParams}}Object{{#nullSafe}}{{^required}}?{{/required}}{{/nullSafe}} postBody = {{paramName}};{{/bodyParams}}

    {{^nullSafe}}
        // verify required params are set
      {{#allParams}}
        {{#required}}
            if({{paramName}} == null) {
            throw ApiException(400, 'Missing required param: {{paramName}}');
            }
        {{/required}}
      {{/allParams}}
    {{/nullSafe}}

      // create path and map variables
      final __path = '{{{path}}}'{{#pathParams}}.replaceAll('{' + '{{baseName}}' + '}',
    {{#isDateTime}}openApiDateTimeParameterToString{{/isDateTime}}{{^isDateTime}}{{#isDate}}openApiDateParameterToString{{/isDate}}{{^isDate}}LocalApiClient.parameterToString{{/isDate}}{{/isDateTime}}(
        {{{paramName}}}){{#nullSafe}}{{^isDateTime}}{{^isDate}}!{{/isDate}}{{/isDateTime}}{{/nullSafe}}){{/pathParams}};

      // query params
      final queryParams = <QueryParam>[];
      final headerParams = <String, String>{}..addAll(options?.headers?.cast<String, String>() ?? {});
      if(!headerParams.containsKey('Accept')) {
    {{#vendorExtensions.x-dart-produces-json}}
        // we only want to accept this format as we can parse it
        headerParams['Accept'] = 'application/json';
    {{/vendorExtensions.x-dart-produces-json}}
    {{^vendorExtensions.x-dart-produces-json}}
      {{#hasProduces}}headerParams['Accept'] = '{{#produces}}{{mediaType}}{{^-last}},{{/-last}}{{/produces}}';{{/hasProduces}}
    {{/vendorExtensions.x-dart-produces-json}}
      }

    {{#queryParams}}
      {{^required}}
          if({{paramName}} != null) {
      {{/required}}
        queryParams.addAll(convertParametersForCollectionFormat(
      (p) =>
      {{#isDateTime}}openApiDateTimeParameterToString(p, false){{/isDateTime}}{{^isDateTime}}{{#isDate}}openApiDateParameterToString(p, false){{/isDate}}{{^isDate}}LocalApiClient.parameterToString(p){{#nullSafe}}!{{/nullSafe}}{{/isDate}}{{/isDateTime}},
          '{{collectionFormat}}', '{{baseName}}', {{paramName}}));
      {{^required}}
          }
      {{/required}}
    {{/queryParams}}
    {{#headerParams}}
        headerParams['{{baseName}}'] = {{paramName}} ?? '';
    {{/headerParams}}

      final authNames = <String>[{{#authMethods}}'{{name}}'{{^-last}}, {{/-last}}{{/authMethods}}];
      final opt = options ?? Options();

    {{#vendorExtensions.x-dart-consumes-json}}
        final contentTypes = [{{#consumes}}'{{{mediaType}}}'{{^-last}},{{/-last}}{{/consumes}}];

        if (contentTypes.isNotEmpty && headerParams['Content-Type'] == null) {
        headerParams['Content-Type'] = contentTypes[0];
        }
      {{#bodyParam}}
        {{^nullSafe}}
            if (postBody != null) {
            postBody = LocalApiClient.serialize(postBody);
            }
        {{/nullSafe}}
        {{#nullSafe}}
          {{#required}}
              postBody = LocalApiClient.serialize(postBody);
          {{/required}}
          {{^required}}
              postBody = postBody == null ? null : LocalApiClient.serialize(postBody);
          {{/required}}
        {{/nullSafe}}
      {{/bodyParam}}
    {{/vendorExtensions.x-dart-consumes-json}}
    {{#vendorExtensions.x-dart-consumes-form}}
        if (!headerParams.containsKey('Content-Type')) {
        headerParams['Content-Type'] = 'application/x-www-form-urlencoded';
        }
      {{#hasFormParams}}
        final postBody = <String, dynamic>{ {{#formParams}}
          {{^isFile}}
        {{^isArray}}
          '{{baseName}}': {{#isDateTime}}{{paramName}}?.toUtc(){{^nullSafe}}?{{/nullSafe}}.toIso8601String(){{/isDateTime}}
                          {{^isDateTime}}{{#isDate}}openApiDateParameterToString{{/isDate}}{{^isDate}}LocalApiClient.parameterToString{{/isDate}}({{paramName}}){{/isDateTime}},
        {{/isArray}}
        {{#isArray}}
            '{{baseName}}': {{paramName}}{{^required}}?{{/required}}{{#nullSafe}}.whereNotNull(){{/nullSafe}}{{^nullSafe}}.where((p) => p != null){{/nullSafe}}
                {{^nullSafe}}?{{/nullSafe}}.map({{#isDateTime}}{{paramName}}?.toUtc().toIso8601String(){{/isDateTime}}
          {{^isDateTime}}{{#isDate}}openApiDateParameterToString{{/isDate}}{{^isDate}}LocalApiClient.parameterToString{{/isDate}}{{/isDateTime}}){{^nullSafe}}?{{/nullSafe}}.toList(),
        {{/isArray}}
          {{/isFile}}
        {{/formParams}} }.entries.where((me) => me.value != null).map((me) => me.key + "=" + Uri.encodeComponent(me.value)).join("&");
      {{/hasFormParams}}
      {{^hasFormParams}}Object postBody = null;{{/hasFormParams}}
    {{/vendorExtensions.x-dart-consumes-form}}
    {{#vendorExtensions.x-dart-consumes-multipartform}}
        if (headerParams.containsKey('Content-Type')) {
        headerParams['Content-Type'] = 'multipart/form-data';
        }
      {{#hasFormParams}}
          final postBody = FormData.fromMap(Map.fromEntries(<String, dynamic>{ {{#formParams}}
          {{^isFile}}
            {{^isArray}}
              '{{baseName}}': {{#isDateTime}}{{paramName}}?.toUtc().toIso8601String(){{/isDateTime}}
                              {{^isDateTime}}{{#isDate}}openApiDateParameterToString{{/isDate}}{{^isDate}}LocalApiClient.parameterToString{{/isDate}}({{paramName}}){{/isDateTime}},
            {{/isArray}}
            {{#isArray}}
                '{{baseName}}': {{paramName}}{{^required}}?{{/required}}{{#nullSafe}}.whereNotNull(){{/nullSafe}}{{^nullSafe}}.where((p) => p != null){{/nullSafe}}
              {{^nullSafe}}?{{/nullSafe}}.map({{#isDateTime}}{{paramName}}?.toUtc().toIso8601String(){{/isDateTime}}
              {{^isDateTime}}{{#isDate}}openApiDateParameterToString{{/isDate}}{{^isDate}}LocalApiClient.parameterToString{{/isDate}}{{/isDateTime}}){{^nullSafe}}?{{/nullSafe}}.toList(),
            {{/isArray}}
          {{/isFile}}
          {{#isFile}}
              '{{baseName}}': {{paramName}},
          {{/isFile}}
        {{/formParams}} }.entries.where((m) => m.value != null)) );
      {{/hasFormParams}}
      {{^hasFormParams}}final postBody = null;{{/hasFormParams}}
    {{/vendorExtensions.x-dart-consumes-multipartform}}

      headerParams.removeWhere((key, value) => value.isEmpty); // remove empty headers
      opt.headers = headerParams;
      opt.method = '{{httpMethod}}';

      return await apiClient.invokeAPI(__path, queryParams, {{#hasFormParams}}postBody{{/hasFormParams}}{{#bodyParam}}postBody{{/bodyParam}}{{^bodyParam}}{{^hasFormParams}}null{{/hasFormParams}}{{/bodyParam}}, authNames, opt);
      }

    {{^vendorExtensions.x-dart-produces-raw}}
    {{#vendorExtensions.x-dart-produces-json}}
      {{#returnType}}Future<{{{returnType}}}> {{/returnType}}{{^returnType}}Future<void> {{/returnType}}
    {{/vendorExtensions.x-dart-produces-json}}
    {{^vendorExtensions.x-dart-produces-json}}
      {{#returnType}}Future<String> {{/returnType}}{{^returnType}}Future<void> {{/returnType}}
    {{/vendorExtensions.x-dart-produces-json}}
    {{nickname}}_decode({{#nullSafe}}Stream<List<int>> body{{/nullSafe}}{{^nullSafe}}ApiResponse response{{/nullSafe}}) async {
    {{#vendorExtensions.x-dart-produces-json}}
      {{#isArray}}
        {{#returnType}}
            return (LocalApiClient.deserializeFromString(await utf8.decodeStream({{#nullSafe}}body{{/nullSafe}}{{^nullSafe}}response.body{{/nullSafe}}), '{{{returnType}}}') as List).map((item) => item as {{returnBaseType}}).toList();
        {{/returnType}}
      {{/isArray}}
      {{^isArray}}
        {{#isMap}}
          {{#returnType}}
              return {{{returnType}}}.from(LocalApiClient.deserializeFromString(await utf8.decodeStream({{#nullSafe}}body{{/nullSafe}}{{^nullSafe}}response.body{{/nullSafe}}), '{{{returnType}}}'));
          {{/returnType}};
        {{/isMap}}
        {{^isMap}}
          {{#returnType}}
            {{#vendorExtensions.x-dart-produces-raw}}
                return response;
            {{/vendorExtensions.x-dart-produces-raw}}
            {{^vendorExtensions.x-dart-produces-raw}}
              return LocalApiClient.deserializeFromString(await utf8.decodeStream({{#nullSafe}}body{{/nullSafe}}{{^nullSafe}}response.body{{/nullSafe}}), '{{{returnType}}}') as {{{returnType}}};
            {{/vendorExtensions.x-dart-produces-raw}}
          {{/returnType}}
        {{/isMap}}
      {{/isArray}}
    {{/vendorExtensions.x-dart-produces-json}}
    {{^vendorExtensions.x-dart-produces-json}}
        {{^vendorExtensions.x-dart-produces-raw}}
        return await utf8.decodeStream({{#nullSafe}}body{{/nullSafe}}{{^nullSafe}}response.body{{/nullSafe}});
        {{/vendorExtensions.x-dart-produces-raw}}
    {{/vendorExtensions.x-dart-produces-json}}
      }
    {{/vendorExtensions.x-dart-produces-raw}}

  {{/operation}}
    }


{{/operations}}
