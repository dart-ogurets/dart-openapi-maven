part of {{pubName}}.api;

{{#operations}}

class {{classname}} {
  final {{classname}}Delegate apiDelegate;
  {{classname}}(ApiClient apiClient) : {{^nullSafe}}assert(apiClient != null), {{/nullSafe}}apiDelegate = {{classname}}Delegate(apiClient);


  {{#operation}}
  /// {{summary}}
  ///
  /// {{notes}}
  {{#vendorExtensions.x-dart-produces-json}}
    {{#returnType}}Future<{{{returnType}}}> {{/returnType}}{{^returnType}}Future<void> {{/returnType}}
  {{/vendorExtensions.x-dart-produces-json}}
  {{^vendorExtensions.x-dart-produces-json}}
    {{#returnType}}Future<String> {{/returnType}}{{^returnType}}Future<void> {{/returnType}}
  {{/vendorExtensions.x-dart-produces-json}}
  {{nickname}}({{#allParams}}{{#required}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/required}}{{/allParams}}{{#hasOptionalParams}}{Options{{#nullSafe}}?{{/nullSafe}} options{{#hasParams}}, {{/hasParams}}{{#allParams}}{{^required}}{{{dataType}}}{{#nullSafe}}?{{/nullSafe}} {{paramName}}{{^-last}}, {{/-last}}{{/required}}{{/allParams}} }{{/hasOptionalParams}}{{^hasOptionalParams}}{{#hasParams}}, {{/hasParams}}{Options{{#nullSafe}}?{{/nullSafe}} options}{{/hasOptionalParams}}) async {

    final response = await apiDelegate.{{nickname}}({{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}} options: options, {{#hasOptionalParams}}{{#hasParams}}{{/hasParams}}{{#allParams}}{{^required}}{{paramName}}: {{paramName}}{{^-last}}, {{/-last}}{{/required}}{{/allParams}}{{/hasOptionalParams}});

    if (![{{{vendorExtensions.x-valid-status-codes}}}].contains(response.statusCode)) {
      throw ApiException(500, 'Invalid response code ${response.statusCode} returned from API');
    }

  {{^returnType}}
    if (response.statusCode == 204) {
      return;
    }
  {{/returnType}}

    final body = response.body;
    if(response.statusCode >= 400) {
    throw ApiException(response.statusCode, body == null ? null : await decodeBodyBytes({{#nullSafe}}body{{/nullSafe}}{{^nullSafe}}response{{/nullSafe}}));
    }

  {{^returnType}}
    throw ApiException(500, 'Invalid response received for 204 based API');
  {{/returnType}}
  {{#returnType}}

    if (body == null) {
      throw ApiException(500, 'Received an empty body');
    }

    return await apiDelegate.{{nickname}}_decode({{#nullSafe}}body{{/nullSafe}}{{^nullSafe}}response{{/nullSafe}});
  {{/returnType}}
  }

  /// {{summary}}
  ///
  /// {{notes}}
  {{#vendorExtensions.x-dart-extension-name}}
    {{#vendorExtensions.x-dart-produces-json}}
      {{#returnType}}Future<ApiResponse> {{/returnType}}{{^returnType}}Future<ApiResponse> {{/returnType}}
    {{/vendorExtensions.x-dart-produces-json}}
    {{^vendorExtensions.x-dart-produces-json}}
        Future<ApiResponse>
    {{/vendorExtensions.x-dart-produces-json}}
  {{vendorExtensions.x-dart-extension-name}}({{#allParams}}{{#required}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/required}}{{/allParams}}{{#hasOptionalParams}}{Options{{#nullSafe}}?{{/nullSafe}} options{{#hasParams}}, {{/hasParams}}{{#allParams}}{{^required}}{{{dataType}}}{{#nullSafe}}?{{/nullSafe}} {{paramName}}{{^-last}}, {{/-last}}{{/required}}{{/allParams}} }{{/hasOptionalParams}}{{^hasOptionalParams}}{{#hasParams}}, {{/hasParams}}{Options{{#nullSafe}}?{{/nullSafe}} options}{{/hasOptionalParams}}) async {

      final response = await apiDelegate.{{nickname}}({{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}} options: options, {{#hasOptionalParams}}{{#hasParams}}{{/hasParams}}{{#allParams}}{{^required}}{{paramName}}: {{paramName}}{{^-last}}, {{/-last}}{{/required}}{{/allParams}}{{/hasOptionalParams}});

      return ApiResponse(response.statusCode, response.headers, response.body);
    }
  {{/vendorExtensions.x-dart-extension-name}}
  {{/operation}}
}


  class {{classname}}Delegate {
  final ApiClient apiClient;

{{classname}}Delegate(this.apiClient){{^nullSafe}} : assert(apiClient != null){{/nullSafe}};

{{#operation}}
    Future<ApiResponse>
  {{nickname}}({{#allParams}}{{#required}}{{{dataType}}} {{paramName}}{{^-last}}, {{/-last}}{{/required}}{{/allParams}}{{#hasOptionalParams}}{Options{{#nullSafe}}?{{/nullSafe}} options{{#hasParams}}, {{/hasParams}}{{#allParams}}{{^required}}{{{dataType}}}{{#nullSafe}}?{{/nullSafe}} {{paramName}}{{^-last}}, {{/-last}}{{/required}}{{/allParams}} }{{/hasOptionalParams}}{{^hasOptionalParams}}{{#hasParams}}, {{/hasParams}}{Options{{#nullSafe}}?{{/nullSafe}} options}{{/hasOptionalParams}}) async {
    Object{{^bodyParams}}{{#nullSafe}}?{{/nullSafe}}{{/bodyParams}} postBody{{#bodyParam}} = {{paramName}}{{/bodyParam}};

  {{^nullSafe}}
    // verify required params are set
  {{#allParams}}
    {{#required}}
        if({{paramName}} == null) {
        throw ApiException(400, 'Missing required param: {{paramName}}');
        }
    {{/required}}
  {{/allParams}}
  {{/nullSafe}}

    // create path and map variables
    final __path = '{{{path}}}'{{#pathParams}}.replaceAll('{' + '{{baseName}}' + '}', {{{paramName}}}.toString()){{/pathParams}};

    // query params
    final queryParams = <QueryParam>[];
    final headerParams = <String, String>{}..addAll(options?.headers?.cast<String, String>() ?? {});
    if(headerParams['Accept'] == null) {
  {{#vendorExtensions.x-dart-produces-json}}
      // we only want to accept this format as we can parse it
      headerParams['Accept'] = 'application/json';
  {{/vendorExtensions.x-dart-produces-json}}
  {{^vendorExtensions.x-dart-produces-json}}
    {{#hasProduces}}headerParams['Accept'] = '{{#produces}}{{mediaType}}{{^-last}},{{/-last}}{{/produces}}';{{/hasProduces}}
  {{/vendorExtensions.x-dart-produces-json}}
    }

  {{#queryParams}}
    {{^required}}
        if({{paramName}} != null) {
    {{/required}}
      queryParams.addAll(convertParametersForCollectionFormat(LocalApiClient.parameterToString, '{{collectionFormat}}', '{{baseName}}', {{paramName}}));
    {{^required}}
        }
    {{/required}}
  {{/queryParams}}
  {{#headerParams}}
      headerParams['{{baseName}}'] = {{paramName}};
  {{/headerParams}}

    final authNames = <String>[{{#authMethods}}'{{name}}'{{^-last}}, {{/-last}}{{/authMethods}}];
    final opt = options ?? Options();

  {{#vendorExtensions.x-dart-consumes-json}}
      final contentTypes = [{{#consumes}}'{{{mediaType}}}'{{^-last}},{{/-last}}{{/consumes}}];

      if (contentTypes.isNotEmpty && headerParams['Content-Type'] == null) {
      headerParams['Content-Type'] = contentTypes[0];
      }
    {{^nullSafe}}
      if (postBody != null) {
    {{/nullSafe}}
      postBody = LocalApiClient.serialize(postBody);
    {{^nullSafe}}
        }
    {{/nullSafe}}
  {{/vendorExtensions.x-dart-consumes-json}}
  {{#vendorExtensions.x-dart-consumes-form}}
      if (headerParams['Content-Type'] == null) {
      headerParams['Content-Type'] = 'application/x-www-form-urlencoded';
      }
      final formData = <String, String>{};
    {{#formParams}}
      {{^isFile}}
          formData['{{baseName}}'] = Uri.encodeFull(LocalApiClient.parameterToString({{paramName}}));
      {{/isFile}}
    {{/formParams}}
    {{#hasFormParams}}
        postBody = formData.entries.map((me) => me.key + "=" + me.value).join("&");
    {{/hasFormParams}}
  {{/vendorExtensions.x-dart-consumes-form}}
  {{#vendorExtensions.x-dart-consumes-multipartform}}
      if (headerParams['Content-Type'] == null) {
      headerParams['Content-Type'] = 'multipart/form-data';
      }
      final formData = <String, dynamic>{};

    {{#formParams}}
      {{^isFile}}
          if ({{paramName}} != null) {
          formData['{{baseName}}'] = Uri.encodeFull(LocalApiClient.parameterToString({{paramName}}));
          }
      {{/isFile}}
      {{#isFile}}
          if ({{paramName}} != null) {
          formData['{{baseName}}'] = {{paramName}};
          }
      {{/isFile}}
    {{/formParams}}
      if (formData.isNotEmpty) {
      postBody = FormData.fromMap(formData);
      }
  {{/vendorExtensions.x-dart-consumes-multipartform}}

    opt.headers = headerParams;
    opt.method = '{{httpMethod}}';

    return await apiClient.invokeAPI(__path, queryParams, postBody, authNames, opt);
    }

  {{#vendorExtensions.x-dart-produces-json}}
    {{#returnType}}Future<{{{returnType}}}> {{/returnType}}{{^returnType}}Future<void> {{/returnType}}
  {{/vendorExtensions.x-dart-produces-json}}
  {{^vendorExtensions.x-dart-produces-json}}
    {{#returnType}}Future<String> {{/returnType}}{{^returnType}}Future<void> {{/returnType}}
  {{/vendorExtensions.x-dart-produces-json}}
  {{nickname}}_decode({{#nullSafe}}Stream<List<int>> body{{/nullSafe}}{{^nullSafe}}ApiResponse response{{/nullSafe}}) async {
  {{#vendorExtensions.x-dart-produces-json}}
    {{#isArray}}
      {{#returnType}}
          return (LocalApiClient.deserializeFromString(await decodeBodyBytes({{#nullSafe}}body{{/nullSafe}}{{^nullSafe}}response{{/nullSafe}}), '{{{returnType}}}') as List).map((item) => item as {{returnBaseType}}).toList();
      {{/returnType}}
    {{/isArray}}
    {{^isArray}}
      {{#isMap}}
        {{#returnType}}
            return {{{returnType}}}.from(LocalApiClient.deserializeFromString(await decodeBodyBytes({{#nullSafe}}body{{/nullSafe}}{{^nullSafe}}response{{/nullSafe}}), '{{{returnType}}}'));
        {{/returnType}};
      {{/isMap}}
      {{^isMap}}
        {{#returnType}}
            return LocalApiClient.deserializeFromString(await decodeBodyBytes({{#nullSafe}}body{{/nullSafe}}{{^nullSafe}}response{{/nullSafe}}), '{{{returnType}}}') as {{{returnType}}};
        {{/returnType}}
      {{/isMap}}
    {{/isArray}}
  {{/vendorExtensions.x-dart-produces-json}}
  {{^vendorExtensions.x-dart-produces-json}}
      return await decodeBodyBytes(response);
  {{/vendorExtensions.x-dart-produces-json}}
    }
{{/operation}}
  }


{{/operations}}
